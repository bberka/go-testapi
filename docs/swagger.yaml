basePath: /
definitions:
  models.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      new_password_repeat:
        type: string
      old_password:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      agree_terms:
        type: boolean
      email:
        type: string
      password:
        type: string
      password_repeat:
        type: string
    type: object
  models.TokenResponse:
    properties:
      expires_at:
        type: integer
      refresh_expires_at:
        type: integer
      refresh_token:
        type: string
      token:
        type: string
    type: object
  models.UserDto:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:80
info:
  contact: {}
  description: This is a sample API for authentication
  title: Test API
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Changes the password of the authenticated user
      parameters:
      - description: Change Password Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a token
      parameters:
      - description: Login Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - Auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the token of the authenticated user
      parameters:
      - description: Refresh
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User registration
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
